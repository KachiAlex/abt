// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole
  isActive      Boolean  @default(true)
  profileImage  String?
  department    String?
  jobTitle      String?
  address       String?
  city          String?
  state         String?
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  contractorProfile ContractorProfile?
  submissions       Submission[]
  approvals         Approval[]
  inspections       Inspection[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("users")
}

enum UserRole {
  GOVERNMENT_ADMIN
  GOVERNMENT_OFFICER
  CONTRACTOR
  ME_OFFICER
  PUBLIC
}

// Contractor Management
model ContractorProfile {
  id              String  @id @default(uuid())
  userId          String  @unique
  companyName     String
  registrationNo  String  @unique
  contactPerson   String
  companyEmail    String
  companyPhone    String
  companyAddress  String
  rating          Float   @default(0)
  isVerified      Boolean @default(false)
  isCertified     Boolean @default(false)
  yearsExperience Int?
  specialization  String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Project[]
  submissions  Submission[]

  @@map("contractor_profiles")
}

// Project Management
model Project {
  id                 String        @id @default(uuid())
  name               String
  description        String
  category           ProjectCategory
  lga                String
  priority           Priority      @default(MEDIUM)
  status             ProjectStatus @default(NOT_STARTED)
  progress           Int           @default(0)
  budget             Decimal
  allocatedBudget    Decimal?
  spentBudget        Decimal       @default(0)
  fundingSource      String
  startDate          DateTime
  expectedEndDate    DateTime
  actualEndDate      DateTime?
  beneficiaries      String?
  contractorId       String?
  projectManagerId   String?
  location           Json? // {coordinates, address}
  isPublic           Boolean       @default(true)
  qualityScore       Float         @default(0)
  safetyCompliance   String        @default("Good")
  weatherDelay       Int           @default(0)
  safetyIncidents    Int           @default(0)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  contractor    ContractorProfile? @relation(fields: [contractorId], references: [id])
  milestones    Milestone[]
  submissions   Submission[]
  documents     Document[]
  teamMembers   ProjectTeamMember[]
  inspections   Inspection[]
  auditLogs     AuditLog[]

  @@map("projects")
}

enum ProjectCategory {
  TRANSPORTATION
  HEALTHCARE
  EDUCATION
  WATER_SANITATION
  HOUSING
  AGRICULTURE
  ENERGY
  ICT
  TOURISM
  ENVIRONMENT
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  NEAR_COMPLETION
  COMPLETED
  DELAYED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Milestone Management
model Milestone {
  id             String          @id @default(uuid())
  projectId      String
  name           String
  description    String
  dueDate        DateTime
  completedDate  DateTime?
  status         MilestoneStatus @default(PENDING)
  progress       Int             @default(0)
  budget         Decimal?
  order          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("milestones")
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

// Submission & Approval System
model Submission {
  id               String         @id @default(uuid())
  projectId        String
  milestoneId      String?
  contractorId     String
  submittedBy      String
  type             SubmissionType
  title            String
  description      String
  progress         Int?
  estimatedValue   Decimal?
  priority         Priority       @default(MEDIUM)
  status           SubmissionStatus @default(PENDING)
  qualityScore     Float?
  safetyCompliance String?
  weatherImpact    String?
  mediaCount       Int            @default(0)
  dueDate          DateTime?
  submittedAt      DateTime       @default(now())
  reviewedAt       DateTime?
  reviewedBy       String?
  reviewComments   String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone       Milestone?        @relation(fields: [milestoneId], references: [id])
  contractor      ContractorProfile @relation(fields: [contractorId], references: [id])
  submitter       User              @relation(fields: [submittedBy], references: [id])
  documents       Document[]
  approvals       Approval[]

  @@map("submissions")
}

enum SubmissionType {
  MILESTONE
  PROGRESS
  ISSUE
  SAFETY
  QUALITY
  DELAY
  GENERAL
}

enum SubmissionStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  FLAGGED
  REQUIRES_CLARIFICATION
}

// Approval Workflow
model Approval {
  id           String        @id @default(uuid())
  submissionId String
  reviewerId   String
  action       ApprovalAction
  comments     String?
  createdAt    DateTime      @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reviewer   User       @relation(fields: [reviewerId], references: [id])

  @@map("approvals")
}

enum ApprovalAction {
  APPROVED
  REJECTED
  FLAGGED
  REQUEST_CLARIFICATION
}

// Document Management
model Document {
  id           String      @id @default(uuid())
  projectId    String?
  submissionId String?
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  category     DocumentCategory
  uploadedBy   String
  isPublic     Boolean     @default(false)
  createdAt    DateTime    @default(now())

  // Relations
  project    Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submission Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentCategory {
  CONTRACT
  TECHNICAL
  ENVIRONMENTAL
  REPORT
  PHOTO
  VIDEO
  OTHER
}

// Team Management
model ProjectTeamMember {
  id        String   @id @default(uuid())
  projectId String
  name      String
  role      String
  department String?
  email     String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_team_members")
}

// Inspection Management
model Inspection {
  id          String          @id @default(uuid())
  projectId   String
  inspectorId String
  type        InspectionType
  scheduledAt DateTime
  completedAt DateTime?
  status      InspectionStatus @default(SCHEDULED)
  findings    String?
  score       Float?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  inspector User    @relation(fields: [inspectorId], references: [id])

  @@map("inspections")
}

enum InspectionType {
  QUALITY
  SAFETY
  PROGRESS
  FINAL
  COMPLIANCE
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

// Notification System
model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data for the notification
  isRead    Boolean          @default(false)
  isUrgent  Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  DEADLINE
  PAYMENT
  INSPECTION
  APPROVAL
  REJECTION
  SYSTEM
  GENERAL
}

// Reports Management
model Report {
  id          String     @id @default(uuid())
  title       String
  type        ReportType
  category    String
  generatedBy String
  startDate   DateTime?
  endDate     DateTime?
  data        Json // Report data and configuration
  filePath    String?
  fileSize    Int?
  isPublic    Boolean    @default(false)
  downloads   Int        @default(0)
  createdAt   DateTime   @default(now())

  @@map("reports")
}

enum ReportType {
  MONTHLY
  QUARTERLY
  ANNUAL
  SPECIAL
  CUSTOM
}

// Audit Log
model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  projectId String?
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@map("audit_logs")
}

// System Settings
model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  category  String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}